" -----------------------------------------------------------
" VIM - Konfiguration von Niko Ehrenfeuchter
" VIM - Version 6.3
" ~/.vimrc
" Last Change: 16. April 2007, 14:22:37
" -----------------------------------------------------------

" Settings {{{

    " Kein Vi-kompatibler Modus 
    set nocompatible

    " Alle Suchtreffer farblich hervorheben 
    set hlsearch

    " Während der Eingabe zum entsprechenden Text springen
    set incsearch

    " Groß- und Kleinschreibung bei der Suche ignorieren 
    set ignorecase

    " ignorecase abschalten, wenn Muster Großbuchstaben enthält
    set smartcase

    " Syntax-Highlighting 
    syntax on

    " Faltungsmethode = Markierungen - Standardmäßig werden {{{ zum Anfang und }}}
    " zum Ende einer Faltung verwendet
    set foldmethod=marker

    " Automatisches Einrücken
    set smartindent

    " Einrücktiefe
    set shiftwidth=4

    set tabstop=4

    " Treppeneffekt beim Copy & Paste verhindern
    set pastetoggle=<F8>

    " Backup-File anlegen
"     set backup

    " Pfad zum Backup-Verzeichnis
"    set backupdir=~/.vim/backupdir

    " Normales Verhalten der Backspace-Taste
    set backspace=2

    " Zeigt den aktuellen Modus an
    set showmode

    " Zeigt die aktuelle Cursorposition
    set ruler

    " Ein Leerzeichen nach .,?,! beim Zusammenfügen von zwei Zeilen
    set nojoinspaces

    " Statusline - 2 Zeilen hoch
    set laststatus=2

    " Modeline nur in 1. Zeile zulässig
    set modelines=1

    " Name der aktuellen Datei in Fenster-Titel-Leiste
    set title

    " Liste von Verzeichnissen die durchsucht werden
    set runtimepath=~/.vim,$VIMRUNTIME

    set viminfo='20,\"50

    set history=50

    " Pfad zum VIM-Helpfile - Diese Option ist nur nötig wenn das
    " Aufrufen der VIM-Hilfe zu einer Fehlermeldung führt
"   set helpfile=/usr/share/vim/vim63/doc/help.txt.gz       

" }}}

" Mappings {{{

    " Hervorhebungen der Suche mit Strg-L enfernen
    map <silent> <c-l> :silent nohl<cr>

" }}}

" Autocommands {{{

    if has("autocmd")

        " LastMod - Funktion beim Speichern einer Datei aufrufen
        autocmd BufWrite *.vimrc		call LastMod()
        autocmd BufWrite *.c,*.h,*.cpp	call LastMod()
        autocmd BufWrite *.tex			call LastMod()
        autocmd BufWrite *.bib			call LastMod()
        autocmd BufWrite *.gdf			call LastMod()

        " filetype plugin on

    endif

" }}}

" Funktionen {{{

	function! IncBuildNo()
		let pat = "#define BUILDNO"
		let lineno = search('^' . pat, 'nw')
		if lineno > 0
			" let pat = getline(lineno)
			" let len = strlen(pat)
			let curbuild = strpart(getline(lineno), 16)
			let curbuild += 1
			call setline(16, pat . " " . curbuild)
		endif
	endfunction

    " Sucht in einem Bereich von $range_size Zeilen am Anfang und Ende 
	" einer Datei nach dem Muster $pat und erneuert dort das Datum
    function! LastMod()
		let curpos = getpos(".")        " save current position
		let pat = "Last Change: "       " define pattern
		let range_size = 20             " define nr of checked lines
		let lline = line("$")           " get nr of last last
		let date = strftime("%d. %B %Y, %X")

		" only if file is longer than $range_size lines, check the begin too...
        if line("$") > range_size
			let begin = lline - range_size
			let range = begin . "," . lline
			exe range . "g/" . pat . "/s/" . pat . ".*/" . pat . date
			let lline = range_size
        endif
		let range = "1," . lline
		exe range . "g/" . pat . "/s/" . pat . ".*/" . pat . date
		
		call IncBuildNo() " increase BUILDNO macro
		call setpos('.', curpos)   " restore cursor position

		" redraw the screen to avoid annoying 'Pattern not found' messages
		" that force the user to press enter manually (they appear when the
		" number of (error-) messages produced > 'cmdheight' (default = 1)
		redraw
    endfunction

" }}}

" Syntax {{{

    " Folds
    "hi Folded ctermbg=blue ctermfg=white

    " Statusline
    "hi StatusLine cterm=bold,reverse

    if has("gui_running")
        colorscheme darkblue
    endif

" }}}

" Plugins {{{

" }}}

" Registers {{{

    " lade makro fuer cpp-debug define in register 'd'
    let @d = "O0C#ifdef DEBUGjo0C#endif"
    let @v = "O0C#ifdef TSS_DEBUG_VERBOSEjo0C#endif"
    let @i = "O0C#ifdef TSS_DEBUG_INFOjo0C#endif"

	" TPM-kommentar in register 't'
	let @t = "A	/*TPM*/"

" }}}
