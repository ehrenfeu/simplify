" -----------------------------------------------------------
" VIM - Konfiguration von Niko Ehrenfeuchter
" VIM - Version 6.3
" ~/.vimrc
" Last Change: 30. November 2005
" -----------------------------------------------------------

" Settings {{{

    " Kein Vi-kompatibler Modus 
    set nocompatible

    " Alle Suchtreffer farblich hervorheben 
    set hlsearch

    " Während der Eingabe zum entsprechenden Text springen
    set incsearch

    " Groß- und Kleinschreibung bei der Suche ignorieren 
    set ignorecase

    " ignorecase abschalten, wenn Muster Großbuchstaben enthält
    set smartcase

    " Syntax-Highlighting 
    syntax on

    " Faltungsmethode = Markierungen - Standardmäßig werden {{{ zum Anfang und }}}
    " zum Ende einer Faltung verwendet
    set foldmethod=marker

    " Automatisches Einrücken
    set smartindent

    " Einrücktiefe
    set shiftwidth=4

    set tabstop=4

    " Treppeneffekt beim Copy & Paste verhindern
    set pastetoggle=<F8>

    " Backup-File anlegen
"     set backup

    " Pfad zum Backup-Verzeichnis
"    set backupdir=~/.vim/backupdir

    " Normales Verhalten der Backspace-Taste
    set backspace=2

    " Zeigt den aktuellen Modus an
    set showmode

    " Zeigt die aktuelle Cursorposition
    set ruler

    " Ein Leerzeichen nach .,?,! beim Zusammenfügen von zwei Zeilen
    set nojoinspaces

    " Statusline - 2 Zeilen hoch
    set laststatus=2

    " Modeline nur in 1. Zeile zulässig
    set modelines=1

    " Name der aktuellen Datei in Fenster-Titel-Leiste
    set title

    " Liste von Verzeichnissen die durchsucht werden
    set runtimepath=~/.vim,$VIMRUNTIME

    set viminfo='20,\"50

    set history=50

    " Pfad zum VIM-Helpfile - Diese Option ist nur nötig wenn das
    " Aufrufen der VIM-Hilfe zu einer Fehlermeldung führt
"   set helpfile=/usr/share/vim/vim63/doc/help.txt.gz

	" split-fenster unterhalb bzw. rechts
	set splitbelow
	set splitright

" }}}

" Mappings {{{

    " Hervorhebungen der Suche mit Strg-L enfernen
    map <silent> <c-l> :silent nohl<cr>

" }}}

" Autocommands {{{

    if has("autocmd")

        " LastMod - Funktion beim Speichern einer Datei aufrufen
        autocmd BufWrite *.c,*.h,*.cpp	ks|call LastMod()|'s
        autocmd BufWrite *.tex			ks|call LastMod()|'s
        autocmd BufWrite *.bib			ks|call LastMod()|'s
        autocmd BufWrite *.gdf			ks|call LastMod()|'s

        " filetype plugin on

    endif

" }}}

" Funktionen {{{

    " Sucht in den ersten 20 Zeilen einer Datei nach den Worten 'Last Change: ' 
    " und erneuert das Datum wenn die Datei verändert wurde
    fun! LastMod()
        if line("$") > 20
    let l = 20
        else
    let l = line("$")
        endif
        exe "1," . l . "g/Last Change: /s/Last Change: .*/Last Change: " . strftime("%d. %B %Y")
    endfun

" }}}

" Syntax {{{

    " Folds
    "hi Folded ctermbg=blue ctermfg=white

    " Statusline
    "hi StatusLine cterm=bold,reverse

    if has("gui_running")
        colorscheme darkblue
    endif

" }}}

" Plugins {{{

" }}}

" Registers {{{

    " lade makro fuer cpp-debug define in register 'd'
    let @d = "O0C#ifdef DEBUGjo0C#endif"

" }}}
