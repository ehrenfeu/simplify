" -----------------------------------------------------------
" VIM - config of Niko Ehrenfeuchter
" VIM - Version 7.2
" ~/.vimrc
" Last Change: 22. Juli 2016, 13:46:44
" -----------------------------------------------------------

" settings {{{
    " don't use Vi-compatible mode
    set nocompatible

    " highlight search matches
    set hlsearch

    " jump to incremental search results while typing
    set incsearch

    " ignore case when matching patterns
    set ignorecase

    " do *NOT* ignore case if the search pattern contains capital letters
    set smartcase

    " syntax highlighting 
    syntax on

    " use markers "{{{" and "}}}" to delimit folds
    " set foldmethod=marker

    " smart indenting raises/lowers the indention level at special
    " programming keywords and brackets
    set smartindent

    " width of indenting levels
    set shiftwidth=4

    set tabstop=4

	" replace <TAB>s by blanks (I'm forced by other people to do so...)
	set expandtab

    " shortcut to switch the paste mode on/off
    set pastetoggle=<F8>

    " create a backup-file when saving
"     set backup

    " path to directory for backup-files
"    set backupdir=~/.vim/backupdir

    " allow backspace to work over autoindent, linebreaks and the start
    " of the current insert mode (aka: make backspace behave normal)
    set backspace=2

    " show the current mode (insert/replace/visual) in the last line
    set showmode

    " show the current cursor position in the status line
    set ruler

    " set only *one* space after .,?,! when joining lines
    set nojoinspaces

    " always show a status line, no matter how many windows
    set laststatus=2

	" enable modeline evaluation
	set modeline

    " allow modelines in lines 1-40
    set modelines=40

    " show the name of the current file in the terminal's title
    " (doesn't work for cygwin-rxvt, so disable this)
    set notitle

    " list of directories that are searched for runtime files
    set runtimepath=~/.vim,$VIMRUNTIME

    " use the 'viminfo' file to remember stuff:
    "  '50 - remember marks for the last 50 files
    "  <50 - remember up to 50 lines *per* register
    set viminfo='50,<50

    " remember the last 5000 ":" commands and the last 5000 searches (each)
    set history=5000

	" disable beep and visual bell
	set vb t_vb=

	" default to split windows to the right
	set splitright

    " filetype plugin on

" }}}

" mappings {{{

    " remove search-highlighting with <ctrl>-L
    map <silent> <c-l> :silent nohl<cr>

	" switch mappings of ` and ' (jump to marker)
	nnoremap ' `
	nnoremap ` '

    " don't reset indenting on comments (see :help smartindent)
    inoremap # X#

" }}}

" autocommands {{{

    if has("autocmd")

        " call LastMod() when saving special files
        autocmd BufWrite *.vimrc		call LastMod()
        autocmd BufWrite *.c,*.h,*.cpp	call LastMod()
        autocmd BufWrite *.tex			call LastMod()
        autocmd BufWrite *.bib			call LastMod()
        autocmd BufWrite *.gdf			call LastMod()

        " use indenting levels for folding on certain file types
        autocmd BufRead *.py 	set foldmethod=indent
        autocmd BufRead *.py 	syntax sync minlines=99999

        " .hgsb are SVI Huygens template files written in Tcl
        autocmd BufRead *.hgsb 	set filetype=tcl

    endif

" }}}

" functions {{{

    " looks for a special cpp-macro and increases its number
	function! IncBuildNo()
		let pat = "#define BUILDNO"
		let lineno = search('^' . pat, 'nw')
		if lineno > 0
			" let pat = getline(lineno)
			" let len = strlen(pat)
			let curbuild = strpart(getline(lineno), 16)
			let curbuild += 1
			call setline(16, pat . " " . curbuild)
		endif
	endfunction

    " searches a certain range of lines at the beginnging and the end
    " of a file for a pattern "$pat" and renews the date noted there
    function! LastMod()
		let curpos = getpos(".")        " save current position
		let pat = "Last Change: "       " define pattern
		let range_size = 20             " define nr of checked lines
		let lline = line("$")           " get nr of last line
		let date = strftime("%d. %B %Y, %X")

		" only if file is longer than $range_size lines, check the begin too...
        if line("$") > range_size
			let begin = lline - range_size
			let range = begin . "," . lline
			exe range . "g/" . pat . "/s/" . pat . ".*/" . pat . date
			let lline = range_size
        endif
		let range = "1," . lline
		exe range . "g/" . pat . "/s/" . pat . ".*/" . pat . date
		
		call IncBuildNo() " increase BUILDNO macro
		call setpos('.', curpos)   " restore cursor position

		" redraw the screen to avoid annoying 'Pattern not found' messages
		" that force the user to press enter manually (they appear when the
		" number of (error-) messages produced > 'cmdheight' (default = 1)
		redraw
    endfunction

" }}}

" syntax {{{

    " line used for closed folds, use white on blue for color terminals
    highlight Folded ctermbg=blue ctermfg=white

    " status line of *current* window:
    " highlight StatusLine cterm=bold,reverse

    " use colorscheme optimized for transparent dark terminals
    " (silent! ignores the warning if the scheme is not available)
    silent! colorscheme quiche

    " set a different colorscheme for the GUI
    if has("gui_running")
        colorscheme darkblue
    endif

    " enable folding for debian changelog/control files
	let g:debchangelog_fold_enable = 1
	let g:debcontrol_fold_enable = 1

" }}}

" plugins {{{

" }}}

" registers {{{

    " load macro for cpp-debug in register "d"
    let @d = "O0C#ifdef DEBUGjo0C#endif"

    " trailing FIXME-comment in register "f"
	let @f = "A	/* FIXME */"

    " trailing TODO-comment in register "t"
	let @t = "A	/* TODO */"

" }}}
